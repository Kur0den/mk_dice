import random
import re
import asyncio
import json
from os import environ as env
from sys import exit
import logging

import websockets
from dotenv import load_dotenv
from misskey import Misskey

# Áí∞Â¢ÉÂ§âÊï∞„Å®„Åã
load_dotenv()
misskey_domain = "chpk.kur0den.net"

# MisskeyÈñ¢‰øÇ
mk = Misskey(misskey_domain, i=env["MISSKEY_TOKEN"])
mk_id = mk.i()["id"]
ws_url = f'wss://{misskey_domain}/streaming?i={env["MISSKEY_TOKEN"]}'

logging.basicConfig(
    format="%(asctime)s %(name)s - %(levelname)s: %(message)s",  # Âá∫Âäõ„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    datefmt="[%Y-%m-%dT%H:%M:%S%z]",  # ÊôÇÈñì(asctime)„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    level=logging.INFO,  # „Åì„Åì„ÅßÂá∫Âäõ„Åô„Çã„É≠„Ç∞„É¨„Éô„É´„ÇíË®≠ÂÆö„Åß„Åç„Çã
)
log = logging.getLogger("main")


async def runner():  # „ÇÅ„ÅÑ„Çì„ÅÆ„Åü„Åô„Åè
    while True:
        try:
            async with websockets.connect(ws_url) as ws:  # type: ignore  ##websocket„Å´Êé•Á∂ö
                await ws.send(
                    json.dumps(
                        {
                            "type": "connect",
                            "body": {
                                "channel": "main",
                                "id": "1",
                            },  # main„ÉÅ„É£„É≥„Éç„É´„Å´Êé•Á∂ö
                        }
                    )
                )
                while True:
                    msg = json.loads(await ws.recv())
                    log.info(
                        "Websocket message received: %s, %s",
                        msg.get("type"),
                        msg["body"].get("type"),
                    )
                    if msg["body"].get("type") == "mention":  # „É°„É≥„Ç∑„Éß„É≥ÊôÇ„Å´ÂèçÂøú
                        # „Å©„ÅÆ„É¶„Éº„Ç∂„Éº„Åã„Çâ„ÅÆ„É°„É≥„Ç∑„Éß„É≥„Åã„ÇíË°®Á§∫
                        log.info(
                            'Mention received from "%s"(@%s@%s)',
                            msg["body"]["body"]["user"]["name"],
                            msg["body"]["body"]["user"]["username"],
                            msg["body"]["body"]["user"]["host"],
                        )
                        # bot„Åò„ÇÉ„Å™„ÅÑ„Åã„ÇíÁ¢∫Ë™ç
                        if msg["body"]["body"]["user"]["isBot"]:
                            log.info("This is a mention from the bot. Ignoring...")
                            continue
                        note_id = msg["body"]["body"]["id"]
                        content = msg["body"]["body"]["text"]
                        # Ê≠£Ë¶èË°®Áèæ„Çí‰ΩúÊàê
                        pattern = r"(d[1-9][0-9]{0,4}|[1-9][0-9]{0,4}d[1-9][0-9]{0,4})"  # d100, 1d100„ÅÆ„Çà„ÅÜ„Å™ÂΩ¢Âºè„Å´„Éû„ÉÉ„ÉÅ

                        match = re.search(pattern, content)
                        if match is None:
                            log.info("No match found in the message")
                            mk.notes_reactions_create(note_id=note_id, reaction="‚ùå")
                            continue
                        else:
                            mk.notes_reactions_create(note_id=note_id, reaction="üé≤")
                        # „Éû„ÉÉ„ÉÅ„Åó„ÅüÊñáÂ≠óÂàó„ÇíÂèñÂæó
                        input_dice = re.search(pattern, content).group()
                        # „Éû„ÉÉ„ÉÅ„Åó„ÅüÊñáÂ≠óÂàó„ÇíË°®Á§∫
                        log.info("Match found in the message: %s", input_dice)
                        # ÂÖ•Âäõ„Åï„Çå„ÅüÂÄ§„ÅÆÂâçÂçä„Å®ÂæåÂçä„ÇíÂàÜ„Åë„Çã
                        input_list = input_dice.split("d")
                        # „ÉÄ„Ç§„Çπ„ÅÆÊï∞„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ1„ÇíÊåøÂÖ•
                        if input_list[0] == "":
                            input_list[0] = "1"

                        # „ÉÄ„Ç§„Çπ„ÅÆÊï∞„Å®Èù¢Êï∞„ÇíintÂûã„Å´Â§âÊèõ
                        input_list = list(map(int, input_list))

                        # ÁµêÊûúÁî®„ÅÆ„É™„Çπ„Éà„Çí‰ΩúÊàê
                        result = []
                        for i in range(input_list[0]):
                            rand_int = random.randint(1, input_list[1])
                            result.append(rand_int)

                        # ÁµêÊûú„ÇíÂá∫Âäõ
                        result_cut = False
                        result_len = len(result)
                        if len(result) > 10:
                            result = result[:10]
                            result_cut = True
                        result = f"({sum(result)}) < {result}"

                        if result_cut:
                            result = result[:-1] + ", ...]"
                        result += f" <{input_list[0]}d{input_list[1]}>"

                        if result_cut:
                            result += f"\n(The {result_len - 10} roll has been cut.)"

                        # ÁµêÊûú„ÇíË°®Á§∫
                        log.info("Result: %s", result)

                        user_name = msg["body"]["body"]["user"]["username"]
                        user_host = msg["body"]["body"]["user"]["host"]
                        if user_host is None:
                            text = f"@{user_name} {result}"
                        else:
                            text = f"@{user_name}@{user_host} {result}"

                        result = await asyncio.to_thread(
                            mk.notes_create, text=text, reply_id=note_id
                        )  # ÁµêÊûú„ÇíËøî‰ø°
                        # id„ÇíË°®Á§∫
                        log.info(
                            "Replied to the mention: %s", result["createdNote"]["id"]
                        )
        except (
            websockets.exceptions.ConnectionClosedError,
            websockets.exceptions.ConnectionClosedOK,
        ):
            log.warning("Connection closed. Reconnecting...")
            continue
        except KeyboardInterrupt:
            exit()


log.info("ready")
try:
    asyncio.run(runner())  # runner()„ÇíÂÆüË°å
except (asyncio.exceptions.CancelledError, KeyboardInterrupt):
    pass
